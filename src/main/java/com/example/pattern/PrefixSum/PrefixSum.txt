What is a prefix sum?
Given an array of integers, a prefix sum is a sum of all elements up to a certain index.
For example, given an array [1, 2, 3, 4, 5], the prefix sum of the first element is 1, the prefix sum of the second element is 1 + 2 = 3,
the prefix sum of the third element is 1 + 2 + 3 = 6, and so on. Prefix sums are useful in a variety of algorithms, such as finding the sum of elements in a range.


Array of integers: [1, 2, 3, 4, 5]
Prefix sum array: [1, 3, 6, 10, 15]
P[i] = A[0] + A[1] + ... + A[i]
Sum of elements in range [i, j] = P[j] - P[i - 1] if i > 0, else P[j]

Useful for:
When you need to query the sum of elements in a range multiple times,
it is more efficient to calculate the prefix sum once and then query the prefix sum array.
Without prefix sum, for single queries, calculating the sum of elements in a range is O(n) time complexity. For multiple queries, it is O(n*m) time complexity.
With prefix sum, calculating the sum of elements in a range is O(1) time complexity.


Given an array of integers, write a function to calculate the prefix sum of each element in the array.
public static int[] prefixSum(int[] arr) {
    int[] prefixSums = new int[arr.length];
    prefixSums[0] = arr[0];
    for (int i = 1; i < arr.length; i++) {
        prefixSums[i] = prefixSums[i - 1] + arr[i];
    }
    return prefixSums;
}

some leetcode problems:
303. Range Sum Query - Immutable - solved
304. Range Sum Query 2D - Immutable - solved
238. Product of Array Except Self
560. Subarray Sum Equals K
1248. Count Number of Nice Subarrays
1674. Minimum Moves to Make Array Complementary
525. Contiguous Array
523. Continuous Subarray Sum
930. Binary Subarrays With Sum
1310. XOR Queries of a Subarray
1588. Sum of All Odd Length Subarrays
1734. Decode XORed Permutation
1800. Maximum Ascending Subarray Sum
1860. Incremental Memory Leak
1861. Rotating the Box
1862. Sum of Floored Pairs
1863. Sum of All Subset XOR Totals
1864. Minimum Number of Swaps to Make the Binary String Alternating
1865. Finding Pairs With a Certain Sum
1866. Number of Ways to Rearrange Sticks With K Sticks Visible
1867. Sort Array by Increasing Frequency
1868. Product of Two Run-Length Encoded Arrays
1869. Longer Contiguous Segments of Ones than Zeros
